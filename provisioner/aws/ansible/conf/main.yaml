- name: Configure kubernetes cluster
  hosts: localhost
  vars_files: ../env_variables_aws.yaml
  tasks:
    - name: Prepare reusable fact
      ansible.builtin.set_fact:
        terraform_outputs: "{{ root.outputs.location }}/{{ root.terraform.prefix }}"

    - name: Check if success file exists
      ansible.builtin.stat:
        path: "{{ terraform_outputs }}/success"
      register: success_file

    - name: Set fact
      ansible.builtin.set_fact:
        success_file_exists: "{{ success_file.stat.exists }}"

- name: Reset kubernetes cluster for idempotency
  hosts: masters:workers
  vars_files: ../env_variables_aws.yaml
  tasks:
    - name: Ensure reset kubernetes cluster 
      shell: |
        kubeadm reset -f
        rm -rf /etc/kubernetes/*
      become: true
      when: hostvars['localhost']['success_file_exists']


- name: Import playbook
  ansible.builtin.import_playbook: install_dependencies.yaml
  when: hostvars['localhost']['success_file_exists']

- name: Import playbook
  ansible.builtin.import_playbook: initialize_master.yaml
  when: hostvars['localhost']['success_file_exists']

- name: Import playbook
  ansible.builtin.import_playbook: join_workers.yaml
  when: hostvars['localhost']['success_file_exists']

- name: Install kubernetes resources
  hosts: localhost
  vars_files: ../env_variables_aws.yaml
  tasks:
    - name: Prepare reusable fact
      ansible.builtin.set_fact:
        terraform_outputs: "{{ root.outputs.location }}/{{ root.terraform.prefix }}"
        kubeconfig: "--kubeconfig {{ terraform_outputs }}/kubeconfig"
        subnet_name: "{{ root.terraform.prefix | normalize_string | concat_strings(resources.subnet.options.name) }}"

    - name: Import playbook storage class
      ansible.builtin.include_tasks: kubernetes_resources/storage_class.yaml
      when: hostvars['localhost']['success_file_exists']
    