- name: Subnet Internet gateway Preparation
  hosts: localhost
  vars_files: ../../env_variables_aws.yaml

  tasks:
    - name: Simplify reusable variables
      ansible.builtin.set_fact:
        nat_gateway_name: "{{ root.terraform.prefix | normalize_string | concat_strings(resources.nat_gateway.options.name) }}"
        module_outputs: "{{ modules_location }}/nat_gateway"

    - name: Create Module folder
      shell: |
        if [ ! -d "{{ module_outputs }}" ]; then
          mkdir -p "{{ module_outputs }}"
        else 
          echo "Outputs Folder in location {{ module_outputs }} already exists. Skipping."
        fi

    - name: Create required main.tf, outputs.tf and variables.tf
      shell: touch {{ module_outputs }}/{{ item }}
      loop: ["main.tf", "variables.tf", "outputs.tf"]

    ###############################
    # PREPARING MODULE MAIN FILES #
    ###############################

    # variables.tf
    - name: Prepare module variables.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/variables.tf"
        block: |
          variable "tags" {
            type = map(string)
            description = "General Tags that will be applied to all the resources generated"
          }

          variable "nat_gateway_name" {
            type = string
            description = "Name tag of the internet gateway"
          }

          variable "subnet_id" {
            type = string
            description = "ID for the subnet resource"
          }
        marker: "#REMOVE_ME"


    # main.tf
    - name: Prepare module main.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/main.tf"
        block: |
          resource "aws_eip" "nat_gateway_eip" {
            tags = merge(var.tags,
              { Name = var.nat_gateway_name })
          }

          resource "aws_nat_gateway" "{{ nat_gateway_name }}" {
            allocation_id = aws_eip.nat_gateway_eip.id
            subnet_id   = var.subnet_id

            tags = merge(var.tags,
              { Name = var.nat_gateway_name })
          }
        marker: "#REMOVE_ME"


    # outputs.tf
    - name: Prepare module outputs.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/outputs.tf"
        block: |
          output "nat_gateway_id" {
            description = "Id of created nat gateway"
            value = aws_nat_gateway.{{ nat_gateway_name }}.id
          }
        marker: "#REMOVE_ME"


    #############################
    # MODIFYING ROOT MAIN FILES #
    #############################

    - name: Prepare root main.tf content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/main.tf"
        block: |
          module "aws_nat_gateway" {
            source = "./modules/nat_gateway"
            subnet_id = module.aws_subnet.subnet_id_public
            nat_gateway_name  = var.nat_gateway_name
            tags = var.tags
          }
        marker: "#REMOVE_ME"

    - name: Prepare root variables.tf content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/variables.tf"
        block: |
          variable "nat_gateway_name" {
            type = string
            description = "Name tag for the internet gateway resource"
          }
        marker: "#REMOVE_ME"


    - name: Prepare root envVariables (real values) content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/envVariables"
        block: |
          nat_gateway_name = "{{ nat_gateway_name }}"
        marker: "#REMOVE_ME"


    ##################
    # FINAL CLEAN-UP #
    ##################

    - name: Clean "#REMOVE_ME" unwanted markers for previous Module block insertions
      ansible.builtin.lineinfile:
        path: "{{ module_outputs }}/{{ item }}"
        state: absent
        regexp: '#REMOVE_ME'
      loop: ["variables.tf", "main.tf", "outputs.tf"]


    - name: Clean "#REMOVE_ME" unwanted markers for previous Root block insertions
      ansible.builtin.lineinfile:
        path: "{{ terraform_outputs }}/{{ item }}"
        state: absent
        regexp: '#REMOVE_ME'
      loop: ["variables.tf", "main.tf", "outputs.tf", "envVariables"]