- name: Key Pair Generation Preparation
  hosts: localhost
  vars_files: ../../env_variables_aws.yaml

  tasks:
    - name: Simplify reusable variables
      ansible.builtin.set_fact:
        key_pair_name: "{{ root.terraform.prefix | normalize_string | concat_strings(resources.subnet.options.name) }}_key"
        module_outputs: "{{ modules_location }}/key"

    - name: Create Module folder
      ansible.builtin.shell: |
        if [ ! -d "{{ module_outputs }}" ]; then
          mkdir -p "{{ module_outputs }}"
        else
          echo "Outputs Folder in location {{ module_outputs }} already exists. Skipping."
        fi

    - name: Create required main.tf, outputs.tf and variables.tf
      ansible.builtin.shell: touch {{ module_outputs }}/{{ item }}
      loop: ["main.tf", "variables.tf", "outputs.tf"]

    ###############################
    # PREPARING MODULE MAIN FILES #
    ###############################

    # variables.tf
    - name: Prepare module variables.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/variables.tf"
        block: |
          variable "tags" {
            type = map(string)
            description = "General Tags that will be applied to all the resources generated"
          }
        marker: "#REMOVE_ME"


    # main.tf
    - name: Prepare module main.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/main.tf"
        block: |
          resource "tls_private_key" "{{ key_pair_name }}_{{ l_index }}" {
            algorithm = "{{ resources.key.algorithm }}"
            rsa_bits  = {{ resources.key.bits }}
          }

          # Create the Key Pair
          resource "aws_key_pair" "{{ key_pair_name }}_{{ l_index }}" {
            key_name   = "{{ key_pair_name }}_{{ l_index }}"
            public_key = tls_private_key.{{ key_pair_name }}_{{ l_index }}.public_key_openssh
            tags = merge(var.tags,
              { Name = "{{ key_pair_name }}_{{ l_index }}" })
          }

          # Save file
          resource "local_file" "{{ key_pair_name }}_{{ l_index }}" {
            filename = "{{ module_outputs }}/{{ key_pair_name }}_{{ l_index }}.pem"
            content  = tls_private_key.{{ key_pair_name }}_{{ l_index }}.private_key_pem
          }
        marker: "#REMOVE_ME"
      loop: "{{ range(0, resources.instance.count | int) }}"
      loop_control:
        index_var: l_index


    # outputs.tf
    - name: Prepare module outputs.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/outputs.tf"
        block: |
          output "{{ key_pair_name }}_{{ l_index }}" {
            description = "The key to be generated"
            value = aws_key_pair.{{ key_pair_name }}_{{ l_index }}.key_name
          }
        marker: "#REMOVE_ME"
      loop: "{{ range(0, resources.instance.count | int) }}"
      loop_control:
        index_var: l_index


    #############################
    # MODIFYING ROOT MAIN FILES #
    #############################

    - name: Prepare root main.tf content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/main.tf"
        block: |
          module "aws_key_pair" {
            source = "./modules/key"
            tags = var.tags
          }
        marker: "#REMOVE_ME"

    ##################
    # FINAL CLEAN-UP #
    ##################

    - name: Clean "#REMOVE_ME" unwanted markers for previous Module block insertions
      ansible.builtin.lineinfile:
        path: "{{ module_outputs }}/{{ item }}"
        state: absent
        regexp: '#REMOVE_ME'
      loop: ["variables.tf", "main.tf", "outputs.tf"]


    - name: Clean "#REMOVE_ME" unwanted markers for previous Root block insertions
      ansible.builtin.lineinfile:
        path: "{{ terraform_outputs }}/{{ item }}"
        state: absent
        regexp: '#REMOVE_ME'
      loop: ["main.tf"]
