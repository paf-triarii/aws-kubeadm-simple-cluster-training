- name: Instance(s) Generation Preparation
  hosts: localhost
  vars_files: ../../env_variables_aws.yaml

  tasks:
    - name: Simplify reusable variables
      ansible.builtin.set_fact:
        aws_role_name: "{{ root.terraform.prefix | normalize_string | concat_strings(resources.subnet.options.name) }}"
        module_outputs: "{{ modules_location }}/roles"

    - name: Create Module folder
      ansible.builtin.shell: |
        if [ ! -d "{{ module_outputs }}" ]; then
          mkdir -p "{{ module_outputs }}"
        else
          echo "Outputs Folder in location {{ module_outputs }} already exists. Skipping."
        fi

    - name: Create required main.tf, outputs.tf and variables.tf
      ansible.builtin.shell: touch {{ module_outputs }}/{{ item }}
      loop: ["main.tf", "variables.tf", "outputs.tf"]

    ###############################
    # PREPARING MODULE MAIN FILES #
    ###############################

    # variables.tf
    - name: Prepare module variables.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/variables.tf"
        block: |
          variable "tags" {
            type = map(string)
            description = "General Tags that will be applied to all the resources generated"
          }

          variable "aws_role_name" {
            type = string
            description = "Name of the instance role"
          }
        marker: "#REMOVE_ME"


    # main.tf
    - name: Prepare module main.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/main.tf"
        block: |
          resource "aws_iam_role" "{{ aws_role_name }}" {
            name   = var.aws_role_name

            assume_role_policy = jsonencode({
              Version = "2012-10-17"
              Statement = [
                {
                  Action = "sts:AssumeRole"
                  Effect = "Allow"
                  Sid    = ""
                  Principal = {
                    Service = "ec2.amazonaws.com"
                  }
                },
              ]
            })

            inline_policy {
              name = "NodePolicy"

              policy = jsonencode({
                Version = "2012-10-17"
                Statement = [
                    {
                        Effect = "Allow"
                        Action = [
                            "ecr:GetAuthorizationToken",
                            "ecr:BatchCheckLayerAvailability",
                            "ecr:GetDownloadUrlForLayer",
                            "ecr:GetRepositoryPolicy",
                            "ecr:DescribeRepositories",
                            "ecr:ListImages",
                            "ecr:DescribeImages",
                            "ecr:BatchGetImage",
                            "ecr:GetLifecyclePolicy",
                            "ecr:GetLifecyclePolicyPreview",
                            "ecr:ListTagsForResource",
                            "ecr:DescribeImageScanFindings"
                        ]
                        Resource = "*"
                    },
                ]
              })
            }

            inline_policy {
              name = "RegistryPolicy"

              policy = jsonencode({
                Version ="2012-10-17"
                Statement = [
                    {
                        Effect = "Allow"
                        Action = [
                          "ecr:GetAuthorizationToken",
                          "ecr:BatchCheckLayerAvailability",
                          "ecr:GetDownloadUrlForLayer",
                          "ecr:GetRepositoryPolicy",
                          "ecr:DescribeRepositories",
                          "ecr:ListImages",
                          "ecr:DescribeImages",
                          "ecr:BatchGetImage",
                          "ecr:GetLifecyclePolicy",
                          "ecr:GetLifecyclePolicyPreview",
                          "ecr:ListTagsForResource",
                          "ecr:DescribeImageScanFindings"
                        ]
                        Resource = "*"
                    },
                ]
              })
            }

            inline_policy {
              name = "SSMManagedPolicy"

              policy = jsonencode({
                Version ="2012-10-17"
                Statement = [
                    {
                        Effect = "Allow"
                        Action = [
                          "ssm:DescribeAssociation",
                          "ssm:GetDeployablePatchSnapshotForInstance",
                          "ssm:GetDocument",
                          "ssm:DescribeDocument",
                          "ssm:GetManifest",
                          "ssm:GetParameter",
                          "ssm:GetParameters",
                          "ssm:ListAssociations",
                          "ssm:ListInstanceAssociations",
                          "ssm:PutInventory",
                          "ssm:PutComplianceItems",
                          "ssm:PutConfigurePackageResult",
                          "ssm:UpdateAssociationStatus",
                          "ssm:UpdateInstanceAssociationStatus",
                          "ssm:UpdateInstanceInformation"
                        ]
                        Resource = "*"
                    },

                    {
                        Effect = "Allow"
                        Action = [
                          "ssmmessages:CreateControlChannel",
                          "ssmmessages:CreateDataChannel",
                          "ssmmessages:OpenControlChannel",
                          "ssmmessages:OpenDataChannel"
                        ]
                        Resource = "*"
                    },

                    {
                        Effect = "Allow"
                        Action = [
                          "ec2messages:AcknowledgeMessage",
                          "ec2messages:DeleteMessage",
                          "ec2messages:FailMessage",
                          "ec2messages:GetEndpoint",
                          "ec2messages:GetMessages",
                          "ec2messages:SendReply"
                      ]
                        Resource = "*"
                    },
                ]
              })
            }

            inline_policy {
              name = "S3Access"

              policy = jsonencode({
                Version ="2012-10-17"
                Statement = [
                    {
                        Effect = "Allow"
                        Action = [
                          "s3:*",
                          "s3-object-lambda:*"
                      ]
                  Resource = "*"
                    },
                ]
              })
            }
            tags = merge(var.tags,
              { Name = var.aws_role_name })
          }

          resource "aws_iam_instance_profile" "{{ aws_role_name }}" {
            name = var.aws_role_name
            role = aws_iam_role.{{ aws_role_name }}.name
            tags = var.tags
          }
        marker: "#REMOVE_ME"


    # outputs.tf
    - name: Prepare module outputs.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/outputs.tf"
        block: |
          output "aws_role_name" {
            description = "The key to be generated"
            value = aws_iam_instance_profile.{{ aws_role_name }}.name
          }
        marker: "#REMOVE_ME"

    #############################
    # MODIFYING ROOT MAIN FILES #
    #############################

    - name: Prepare root main.tf content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/main.tf"
        block: |
          module "aws_iam_instance_profile" {
            source = "./modules/roles"
            aws_role_name = var.aws_role_name
            tags = var.tags
          }
        marker: "#REMOVE_ME"

    - name: Prepare root variables.tf content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/variables.tf"
        block: |
          variable "aws_role_name" {
            type = string
            description = "Name of the instance role"
          }
        marker: "#REMOVE_ME"

    - name: Prepare root envVariables (real values) content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/envVariables"
        block: |
          aws_role_name = "{{ aws_role_name }}"
        marker: "#REMOVE_ME"

    ##################
    # FINAL CLEAN-UP #
    ##################

    - name: Clean "#REMOVE_ME" unwanted markers for previous Module block insertions
      ansible.builtin.lineinfile:
        path: "{{ module_outputs }}/{{ item }}"
        state: absent
        regexp: '#REMOVE_ME'
      loop: ["variables.tf", "main.tf", "outputs.tf"]


    - name: Clean "#REMOVE_ME" unwanted markers for previous Root block insertions
      ansible.builtin.lineinfile:
        path: "{{ terraform_outputs }}/{{ item }}"
        state: absent
        regexp: '#REMOVE_ME'
      loop: ["variables.tf", "main.tf", "outputs.tf", "envVariables"]
