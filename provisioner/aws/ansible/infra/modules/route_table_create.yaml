- name: Subnet route_table Preparation
  hosts: localhost
  vars_files: ../../env_variables_aws.yaml

  tasks:
    - name: Simplify reusable variables
      ansible.builtin.set_fact:
        route_table_name: "{{ root.terraform.prefix | normalize_string | concat_strings(resources.route_table.options.name) }}"
        module_outputs: "{{ modules_location }}/route_table"

    - name: Create Module folder
      shell: |
        if [ ! -d "{{ module_outputs }}" ]; then
          mkdir -p "{{ module_outputs }}"
        else 
          echo "Outputs Folder in location {{ module_outputs }} already exists. Skipping."
        fi

    - name: Create required main.tf, outputs.tf and variables.tf
      shell: touch {{ module_outputs }}/{{ item }}
      loop: ["main.tf", "variables.tf", "outputs.tf"]

    ###############################
    # PREPARING MODULE MAIN FILES #
    ###############################

    # variables.tf
    - name: Prepare module variables.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/variables.tf"
        block: |
          variable "tags" {
            type = map(string)
            description = "General Tags that will be applied to all the resources generated"
          }

          variable "route_table_name" {
            type = string
            description = "Name tag of the route_table"
          }

          variable "subnet_id_public" {
            type = string
            description = "ID of the subnet"
          }

          variable "subnet_id_private" {
            type = string
            description = "ID of the subnet"
          }

          variable "vpc_id" {
            type = string
            description = "ID of the parent VPC"
          }
        marker: "#REMOVE_ME"


    # variables.tf
    - name: Prepare module variables.tf (target ID)
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/variables.tf"
        block: |
          {% if item.target == "playbook" %}
          variable "target_id_public" {
            type = string
            description = "ID of the target gateway"
          }
          {% endif %}
        marker: "#REMOVE_ME"
      loop: "{{ resources.route_table.options.public.routes }}"

    - name: Prepare module variables.tf (target ID - nat)
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/variables.tf"
        block: |
          {% if item.target == "playbook" %}
          variable "target_id_private" {
            type = string
            description = "ID of the target gateway"
          }
          {% endif %}
        marker: "#REMOVE_ME"
      loop: "{{ resources.route_table.options.private.routes }}"


    # main.tf
    - name: Prepare module main.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/main.tf"
        block: |
          resource "aws_route_table" "{{ route_table_name }}_public" {
            vpc_id = var.vpc_id
            tags = merge(var.tags,
              { Name = var.route_table_name })

          }

          resource "aws_route_table_association" "{{ route_table_name }}_public_as" {
            subnet_id      = var.subnet_id
            route_table_id = aws_route_table.{{ route_table_name }}_public.id
          }

          resource "aws_route_table" "{{ route_table_name }}_private" {
            vpc_id = var.vpc_id
            tags = merge(var.tags,
              { Name = var.route_table_name })

          }

          resource "aws_route_table_association" "{{ route_table_name }}_private_as" {
            subnet_id      = var.subnet_id
            route_table_id = aws_route_table.{{ route_table_name }}_private.id
          }
        marker: "#REMOVE_ME"


    # main.tf
    - name: Prepare module main.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/main.tf"
        block: |
          resource "aws_route" "{{ route_table_name }}_public_{{ l_index }}" {
            route_table_id            = aws_route_table.{{ route_table_name }}_public.id
            destination_cidr_block    = "{{ item.destination }}"
            {{ item.type }} = {{ 'var.target_id_public' if item.target == "playbook" else (target | quote )}}
          }
        marker: "#REMOVE_ME"
      loop: "{{ resources.route_table.options.public.routes }}"
      loop_control:
        index_var: l_index

    - name: Prepare module main.tf content file
      ansible.builtin.blockinfile:
        path: "{{ module_outputs }}/main.tf"
        block: |
          resource "aws_route" "{{ route_table_name }}_private_{{ l_index }}" {
            route_table_id            = aws_route_table.{{ route_table_name }}_private.id
            destination_cidr_block    = "{{ item.destination }}"
            {{ item.type }} = {{ 'var.target_id_private' if item.target == "playbook" else (target | quote )}}
          }
        marker: "#REMOVE_ME"
      loop: "{{ resources.route_table.options.private.routes }}"
      loop_control:
        index_var: l_index


    #############################
    # MODIFYING ROOT MAIN FILES #
    #############################

    - name: Prepare root main.tf content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/main.tf"
        block: |
          module "aws_route_table_public" {
            source = "./modules/route_table"
            vpc_id = {{ 'module.aws_vpc.vpc_id' if resources.vpc.enabled else 'var.vpc_id' | replace("'", "") }}
            subnet_id = {{ 'module.aws_subnet.subnet_id' if resources.subnet.enabled else 'var.subnet_id' | replace("'", "") }}
            route_table_name  = var.route_table_name
            {% if resources.route_table.options.public.routes | selectattr("target", "equalto", "playbook") | list | length > 0 %}
            target_id = module.aws_internet_gateway.internet_gateway_id
            {% endif %}
            {% if resources.route_table.options.private.routes | selectattr("target", "equalto", "playbook") | list | length > 0 %}
            target_id = module.aws_nat_gateway.nat_gateway_id
            {% endif %}
            tags = var.tags
          }
        marker: "#REMOVE_ME"

    - name: Prepare root variables.tf content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/variables.tf"
        block: |
          variable "route_table_name" {
            type = string
            description = "Name tag for the route_table resource"
          }
        marker: "#REMOVE_ME"


    - name: Prepare root envVariables (real values) content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/envVariables"
        block: |
          route_table_name = "{{ route_table_name }}"
        marker: "#REMOVE_ME"


    ##################
    # FINAL CLEAN-UP #
    ##################

    - name: Clean "#REMOVE_ME" unwanted markers for previous Module block insertions
      ansible.builtin.lineinfile:
        path: "{{ module_outputs }}/{{ item }}"
        state: absent
        regexp: '#REMOVE_ME'
      loop: ["variables.tf", "main.tf", "outputs.tf"]


    - name: Clean "#REMOVE_ME" unwanted markers for previous Root block insertions
      ansible.builtin.lineinfile:
        path: "{{ terraform_outputs }}/{{ item }}"
        state: absent
        regexp: '#REMOVE_ME'
      loop: ["variables.tf", "main.tf", "outputs.tf", "envVariables"]
      