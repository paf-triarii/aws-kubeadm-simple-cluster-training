---
- name: Prepare Outputs
  hosts: localhost
  vars_files: ../env_variables_aws.yaml
  tasks:
    - name: Prepare reusable fact
      ansible.builtin.set_fact:
        terraform_outputs: "{{ root.outputs.location }}/{{ root.terraform.prefix }}"

    - name: Prepare reusable fact
      ansible.builtin.set_fact:
        modules_location: "{{ terraform_outputs }}/modules"

    # TODO: Change to custom role reusable tasks that we want to do in the same way always.
    # TODO: Handle skipping scenario fully. What happens if skipping, aborts, user confirmation? Think in this feature.
    - name: Remove output folders
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ terraform_outputs }}"
        - "{{ modules_location }}"
      ignore_errors: true
      become: true

    - name: Create output folders
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - "{{ terraform_outputs }}"
        - "{{ modules_location }}"
      become: true

    - name: Prepare main output files
      ansible.builtin.shell: |
          touch {{ terraform_outputs }}/{{ item }}
      loop: ["variables.tf", "providers.tf", "main.tf", "outputs.tf", "envVariables"]

    ################################
    # PREPARING MAIN FILES CONTENT #
    ################################

    # providers.tf
    - name: Prepare providers.tf content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/providers.tf"
        block: |
          terraform {
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> {{ root.terraform.aws_version }}"
              }
            }
          }

          # Left intentionally empty because we handle the authentication and region configuration trough environment variables.
          provider "aws" {}
        marker: "#REMOVE_ME"

    # variables.tf
    - name: Prepare Terraform Global variables.tf content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/variables.tf"
        block: |
          variable "tags" {
            type = map(string)
            description = "General Tags that will be applied to all the resources generated"
          }

        marker: "#REMOVE_ME"

    # envVariables.
    - name: Prepare Tags in Terraform format
      ansible.builtin.set_fact:
        general_tags: "{{ tags | default('') + item.key + ' = \"' + item.value + '\",' }}"
      loop: "{{ resources.tags | dict2items }}"

    - name: Prepare Terraform Global envVariables (real values) content file
      ansible.builtin.blockinfile:
        path: "{{ terraform_outputs }}/envVariables"
        block: |
          tags = {{ '{' + general_tags + '}' }}
        marker: "#REMOVE_ME"


    ##################
    # FINAL CLEAN-UP #
    ##################

    - name: Clean "#REMOVE_ME" unwanted markers for previous block insertions
      ansible.builtin.lineinfile:
        path: "{{ terraform_outputs }}/{{ item }}"
        state: absent
        regexp: '#REMOVE_ME'
      loop: ["variables.tf", "providers.tf", "main.tf", "outputs.tf", "envVariables"]


######################
# MODULES MANAGEMENT #
######################

- name: Generate VPC resource
  ansible.builtin.import_playbook: modules/vpc_create.yaml
  when: resources.vpc.enabled


- name: Setting pre-existing VPC information
  ansible.builtin.import_playbook: modules/vpc_pre_existing.yaml
  when: not resources.vpc.enabled

# If VPC creation is enabled, then it will create the subnet either way (not a pre_existing one).
- name: Generate subnet resource
  ansible.builtin.import_playbook: modules/subnet_create.yaml
  when: resources.vpc.enabled

# If VPC creation is pre-existing, there are two options:
# 1) Create Subnet inside the VPC
# 2) Use a pre-existing subnet
- name: Generate subnet resource when VPC pre-existing
  ansible.builtin.import_playbook: modules/subnet_create.yaml
  when: (not resources.vpc.enabled) and resources.subnet.enabled

# If VPC is pre-existing, there is the option also to use a pre-existing subnet
- name: Setting pre-existing subnet information
  ansible.builtin.import_playbook: modules/subnet_pre_existing.yaml
  when: (not resources.vpc.enabled) and (not resources.subnet.enabled)

- name: Generate security group resource
  ansible.builtin.import_playbook: modules/sg_create.yaml
  when: resources.security_group.enabled

- name: Generate ingress security group rules
  ansible.builtin.import_playbook: modules/sg_ingress_rules_create.yaml
  when: resources.security_group.enabled

- name: Generate egress security group resource
  ansible.builtin.import_playbook: modules/sg_egress_rules_create.yaml
  when: resources.security_group.enabled

- name: Setting pre-existing security group information
  ansible.builtin.import_playbook: modules/sg_pre_existing.yaml
  when: not resources.security_group.enabled

- name: Generate key resource
  ansible.builtin.import_playbook: modules/key_create.yaml
  when: resources.instance.enabled

- name: Generate instance resource
  ansible.builtin.import_playbook: modules/role_create.yaml
  when: resources.role.enabled

- name: Generate instance resource
  ansible.builtin.import_playbook: modules/instance_create.yaml
  when: resources.instance.enabled

- name: Generate internet gateway resource
  ansible.builtin.import_playbook: modules/internet_gateway_create.yaml
  when: resources.internet_gateway.enabled

- name: Generate nat gateway resource
  ansible.builtin.import_playbook: modules/nat_gateway_create.yaml
  when: resources.nat_gateway.enabled


- name: Generate routes and route table resources
  ansible.builtin.import_playbook: modules/route_table_create.yaml
  when: resources.route_table.enabled

- name: Generate required configuration for client VPN
  ansible.builtin.import_playbook: modules/vpn_create.yaml
  when: resources.vpn.enabled

